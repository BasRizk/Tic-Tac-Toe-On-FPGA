module lights_refresher (lights, main_vector, state, win_case, reset, clk);

output reg [17:0] lights;
input [1:0] main_vector [8:0];
input [2:0] state;
input [5:0]win_case;		//	1b_winning? 1b_XO? 3b_win_case? 
input reset;
input clk;

reg clk_1hz;
reg counter;
reg is_winner = win_case[4];

always @ (state or reset)
begin

	if(reset == 1)
		lights = 0;
		
	if(state == 3'b100 & is_winner == 0)		//	if user finishes his turn or computer finishes his turn
		begin
		
		//		lights for X
			
		if(main_vector[0] == 2'b01)
			lights[0] = 1;

		if(main_vector[1] == 2'b01)
			lights[1] = 1;

		if(main_vector[2] == 2'b01)
			lights[2] = 1;

		if(main_vector[3] == 2'b01)
			lights[3] = 1;

		if(main_vector[4] == 2'b01)
			lights[4] = 1;

		if(main_vector[5] == 2'b01)
			lights[5] = 1;

		if(main_vector[6] == 2'b01)
			lights[6] = 1;

		if(main_vector[7] == 2'b01)
			lights[7] = 1;

		if(main_vector[8] == 2'b01)
			lights[8] = 1;
				
		//		lights for O
			
		if(main_vector[0] == 2'b10)	
			lights[9] = 1;

		if(main_vector[1] == 2'b10)
			lights[10] = 1;

		if(main_vector[2] == 2'b10)
			lights[11] = 1;

		if(main_vector[3] == 2'b10)
			lights[12] = 1;

		if(main_vector[4] == 2'b10)
			lights[13] = 1;

		if(main_vector[5] == 2'b10)
			lights[14] = 1;

		if(main_vector[6] == 2'b10)
			lights[15] = 1;

		if(main_vector[7] == 2'b10)
			lights[16] = 1;

		if(main_vector[8] == 2'b10)
			lights[17] = 1;
				
		end

	if(is_winner == 1)							//if there is winning
		begin
		
		if(win_case[3] == 1)						// if winner is x	
			begin		
			
			if(win_case[2:0] == 3'b000)			//	first horizontal line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[0] = ~lights[0];
				lights[1] = ~lights[1];
				lights[2] = ~lights[2];
				end
				
			if(win_case[2:0] == 3'b001)			//	second horizontal line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[3] = ~lights[3];
				lights[4] = ~lights[4];
				lights[5] = ~lights[5];
				end
			
			if(win_case[2:0] == 3'b010)			//	third horizontal line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[6] = ~lights[6];
				lights[7] = ~lights[7];
				lights[8] = ~lights[8];
				end
			
			if(win_case[2:0] == 3'b011)			//	first vertical line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[0] = ~lights[0];
				lights[3] = ~lights[3];
				lights[6] = ~lights[6];
				end
			
			if(win_case[2:0] == 3'b100)			//	second vertical line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[1] = ~lights[1];
				lights[4] = ~lights[4];
				lights[7] = ~lights[7];
				end
			
			if(win_case[2:0] == 3'b101)			//	third vertical line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[2] = ~lights[2];
				lights[5] = ~lights[5];
				lights[8] = ~lights[8];
				end
			
			if(win_case[2:0] == 3'b110)			//	backward slash line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[0] = ~lights[0];
				lights[4] = ~lights[4];
				lights[8] = ~lights[8];
				end
			
			if(win_case[2:0] == 3'b111)			//	forward slash line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[2] = ~lights[2];
				lights[4] = ~lights[4];
				lights[6] = ~lights[6];
				end
				
			end
			
			
			
		if(win_case[3] == 0)						// if winner is O
			begin		
			
			if(win_case[2:0] == 3'b000)			//	first horizontal line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[9] = ~lights[9];
				lights[10] = ~lights[10];
				lights[11] = ~lights[11];
				end
				
			if(win_case[2:0] == 3'b001)			//	second horizontal line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[12] = ~lights[12];
				lights[13] = ~lights[13];
				lights[14] = ~lights[14];
				end
			
			if(win_case[2:0] == 3'b010)			//	third horizontal line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[15] = ~lights[15];
				lights[16] = ~lights[16];
				lights[17] = ~lights[17];
				end
			
			if(win_case[2:0] == 3'b011)			//	first vertical line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[9] = ~lights[9];
				lights[12] = ~lights[12];
				lights[15] = ~lights[15];
				end
			
			if(win_case[2:0] == 3'b100)			//	second vertical line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[10] = ~lights[12];
				lights[13] = ~lights[13];
				lights[16] = ~lights[16];
				end
			
			if(win_case[2:0] == 3'b101)			//	third vertical line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[11] = ~lights[11];
				lights[14] = ~lights[14];
				lights[17] = ~lights[17];
				end
			
			if(win_case[2:0] == 3'b110)			//	backward slash line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[9] = ~lights[9];
				lights[13] = ~lights[13];
				lights[17] = ~lights[17];
				end
			
			if(win_case[2:0] == 3'b111)			//	forward slash line
				repeat(4)
				begin
				// do a loop that lasts for 1 second
				lights[11] = ~lights[11];
				lights[13] = ~lights[13];
				lights[15] = ~lights[15];
				end
				
			end
			
		end
			
end
endmodule
